@using Konnekt.Presentation.Components
@using Konnekt.Presentation.Components.Base
@using Konnekt.Presentation.Components.KonnektButton
@using Konnekt.Presentation.Components.KonnektButton.Models
@using Konnekt.Presentation.Components.Popup.Models
@using Microsoft.AspNetCore.Components.Forms
@inherits PresentationBase

<div id="@PopupModel?.Id" class="popup w-100 h-100 d-flex flex-column justify-content-center align-items-center position-absolute">
    @if (PopupModel?.IsVisible ?? false)
    {
        <div class="popup-container p-5 d-flex flex-nowrap flex-column justify-content-center align-items-center pe-auto">

            @if (!string.IsNullOrEmpty(PopupModel?.TitleText))
            {
                <div class="popup-title">
                    <h3>@PopupModel.TitleText</h3>
                </div>
            }

            @if (!string.IsNullOrEmpty(PopupModel?.BodyText))
            {
                <div class="popup-body">
                    <p>@PopupModel.BodyText</p>
                </div>
            }

            @if (ChildContent is not null && CascadedEditContext is not null)
            {
                <EditForm EditContext="CascadedEditContext" OnSubmit="() => PopupCloseControlClickedAsync(Models.PopupResponseState.ClosedWithOption1)">
                    <ValidationSummary />
                    <DataAnnotationsValidator />

                    @ChildContent(CascadedEditContext)

                    <div class="popup-controls w-100 d-flex justify-content-center">
                        @if (!string.IsNullOrEmpty(PopupModel?.Option1Text))
                        {
                            <KonnektButton Class="popup-controls-confirm m-2"
                                           Label="@PopupModel.Option1Text"
                                           ButtonType="ButtonType.Submit"
                                           ButtonSize="ButtonSize.Medium" />
                        }

                        @if (!string.IsNullOrEmpty(PopupModel?.CancelButtonText))
                        {
                            <KonnektButton Class="popup-controls-cancel m-2"
                                           Label="@PopupModel.CancelButtonText"
                                           OnClick="() => PopupCloseControlClickedAsync(Models.PopupResponseState.ClosedWithCancellation)"
                                           ButtonSize="ButtonSize.Medium" />
                        }
                    </div>
                </EditForm>
            }

            @if (ChildContent is null)
            {
                <div class="popup-controls w-100 d-flex justify-content-center">
                    @if (!string.IsNullOrEmpty(PopupModel?.Option1Text))
                    {
                        <KonnektButton Class="popup-controls-confirm m-2"
                                       Label="@PopupModel.Option1Text"
                                       OnClick="() => PopupCloseControlClickedAsync(Models.PopupResponseState.ClosedWithOption1)"
                                       ButtonSize="ButtonSize.Medium" />
                    }

                    @if (!string.IsNullOrEmpty(PopupModel?.Option2Text))
                    {
                        <KonnektButton Class="popup-controls-reject m-2"
                                       Label="@PopupModel.Option2Text"
                                       OnClick="() => PopupCloseControlClickedAsync(Models.PopupResponseState.ClosedWithOption2)"
                                       ButtonSize="ButtonSize.Medium" />
                    }

                    @if (!string.IsNullOrEmpty(PopupModel?.CancelButtonText))
                    {
                        <KonnektButton Class="popup-controls-cancel m-2"
                                       Label="@PopupModel.CancelButtonText"
                                       OnClick="() => PopupCloseControlClickedAsync(Models.PopupResponseState.ClosedWithCancellation)"
                                       ButtonSize="ButtonSize.Medium" />
                    }
                </div>
            }

        </div>
    }
</div>