// <auto-generated />
using System;
using Konnect.Service.DatabaseManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Konnekt.Client.Migrations
{
    [DbContext(typeof(KonnektContext))]
    [Migration("20250401091923_AddingSortingFrameworkForServers")]
    partial class AddingSortingFrameworkForServers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostAuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PostAuthorId");

                    b.HasIndex(new[] { "Id" }, "IX_Posts_Id")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.PostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("CommentAuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex(new[] { "Id" }, "IX_PostComments_Id")
                        .IsUnique();

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Servers_Id")
                        .IsUnique();

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("ChannelDescription")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ChannelOrder")
                        .HasColumnType("int");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex(new[] { "Id" }, "IX_ServerChannels_Id")
                        .IsUnique();

                    b.ToTable("ServerChannels");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerJoinCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex(new[] { "Id" }, "IX_ServerJoinCodes_Id")
                        .IsUnique();

                    b.ToTable("ServerJoinCodes");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerMessages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex(new[] { "Id" }, "IX_ServerMessages_Id")
                        .IsUnique();

                    b.ToTable("ServerMessages");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<int>("ServerOrder")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "IX_ServerUsers_Id")
                        .IsUnique();

                    b.ToTable("ServerUsers");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "743da3b6-e3a4-40fb-ae3a-6773b103ee1a",
                            ConcurrencyStamp = "a94197f4-2722-474e-80bd-3582254240ee",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dc3323c1-5f95-4a9b-803f-983c5a6a537e",
                            ConcurrencyStamp = "3792c9c2-2d51-40ca-b702-39e538769585",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.Post", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", "PostAuthor")
                        .WithMany()
                        .HasForeignKey("PostAuthorId");

                    b.Navigation("PostAuthor");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.PostComment", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", "CommentAuthor")
                        .WithMany()
                        .HasForeignKey("CommentAuthorId");

                    b.Navigation("CommentAuthor");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerChannel", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.Server", "Server")
                        .WithMany("ServerChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerJoinCode", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.Server", "Server")
                        .WithMany("ServerJoinCodes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerMessages", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.ServerChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.ServerUser", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.Server", "Server")
                        .WithMany("ServerUsers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", "User")
                        .WithMany("ServerUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Konnect.Service.DatabaseManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.Server", b =>
                {
                    b.Navigation("ServerChannels");

                    b.Navigation("ServerJoinCodes");

                    b.Navigation("ServerUsers");
                });

            modelBuilder.Entity("Konnect.Service.DatabaseManager.Models.User", b =>
                {
                    b.Navigation("ServerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
