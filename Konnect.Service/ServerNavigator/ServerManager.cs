using Konnect.Service.DatabaseManager;
using Konnect.Service.DatabaseManager.Models;
using Konnect.Service.Models;
using Microsoft.EntityFrameworkCore;

namespace Konnect.Service.ServerNavigator
{
    public class ServerManager : ServiceBase
    {
        public ServerManager(KonnektContext dbContext)
            : base(dbContext) { }

        public async Task<ServiceResponse<Server?>> CreateNewServerAsync(string? serverName, User? user)
        {
            return await ExecAsync<Server?>(async (db, resp) =>
            {
                if (user.Id is null)
                {
                    resp.Errors.Add("User was null");
                    return null;
                }

                var generatedJoinCode = await GenerateServerInviteAsync();
                if (string.IsNullOrEmpty(generatedJoinCode))
                {
                    resp.Errors.Add($"{nameof(generatedJoinCode)} was null");
                    return null;
                }

                Server server = new Server()
                {
                    ServerName = serverName,
                    OwnerId = user.Id,
                    ServerJoinCodes = [new ServerJoinCode()
                    {
                        JoinCode = generatedJoinCode,
                    }],
                    ServerUsers = [new ServerUser {
                        UserId = user.Id,
                    }]
                };

                await db.AddAsync(server);
                await db.SaveChangesAsync();

                return server;
            });
        }

        public async Task<ServiceResponse<Server?>> GetServerById(string serverId)
        {
            return await ExecAsync<Server?>(async (db, resp) =>
            {
                return await db.Servers.AsNoTracking()
                                       .FirstOrDefaultAsync(x => x.Id == serverId);
            });
        }

        public async Task<ServiceResponse<Server?>> AddUserToServerAsync(string? joinCode, User? user)
        {
            return await ExecAsync<Server?>(async (db, resp) =>
            {
                if (user?.Id is null)
                {
                    resp.Errors.Add("User was null");
                    return null;
                }

                if (string.IsNullOrEmpty(joinCode))
                {
                    resp.Errors.Add($"{nameof(joinCode)} was null");
                    return null;
                }

                var matches = db.ServerJoinCodes.AsNoTracking()
                                                .Include(x => x.Server)
                                                .Where(x => x.JoinCode == joinCode);
                if (matches.Any())
                {
                    var server = matches.First().Server!;
                    server.ServerUsers.Add(new()
                    {
                        ServerId = server.Id,
                        UserId = user.Id,
                    });

                    db.Update(server);
                    await db.SaveChangesAsync();

                    return server;
                }
                else
                {
                    return null;
                }
            });
        }

        private async Task<string?> GenerateServerInviteAsync()
        {
            return (await ExecAsync<string>(async (db, resp) =>
            {
                var generatedLink = new string(Guid.NewGuid().ToString().Take(8).ToArray());
                if (generatedLink is null)
                {
                    resp.Errors.Add("Link generated by system was null at creation");
                    return string.Empty;
                }

                if (generatedLink is not null && !db.ServerJoinCodes.Any(x => x.JoinCode.Equals(generatedLink)))
                    return generatedLink;
                else
                    return await GenerateServerInviteAsync();
            })).Result;
        }
    }
}
